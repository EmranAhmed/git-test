on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '**' # Push events to matching  i.e. 1.0, 20.15.10, including hierarchical tags like v1.0/beta

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions: write-all

env:
  REPOSITORY_NAME: ${{ github.event.repository.name }}

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: "8.0"

      - name: Install PHP Dependencies
        uses: ramsey/composer-install@v2

      - name: Setup and Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm clean-install
#      - run: npm run plugin-zip --if-present
#      - run: npm test

      - name: Make Zip # This would actually build your project, using zip for an example artifact
        run: npm run plugin-zip --if-present

#      - name: Upload Zip
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.plugin_name }}
#          path: ${{ env.plugin_name }}.zip
#          overwrite: true
#          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
         # tag_name: ${{ github.ref }}
          tag_name:  'v${{ github.ref }}'
          # release_name: Release ${{ github.ref }}
          # release_name: '${{env.REPOSITORY_NAME}}-${{ github.ref }}'
          release_name: 'v${{ github.ref }}'
          #body: Released ${{ github.ref }}
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./${{ env.REPOSITORY_NAME }}.zip
          asset_name: ${{ env.REPOSITORY_NAME }}
          asset_content_type: application/zip
